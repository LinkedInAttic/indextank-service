>>> import uuid
>>> import datetime
>>> from boto.mturk.connection import MTurkConnection
>>> from boto.mturk.question import Question, QuestionContent, AnswerSpecification, FreeTextAnswer
>>> 
>>> conn = MTurkConnection(host='mechanicalturk.sandbox.amazonaws.com')
>>> keywords=['boto', 'test', 'doctest']
>>> hit_type_rs = conn.register_hit_type('Boto Test HIT type',
...                                      'HIT Type for testing Boto',
...                                      0.12,
...                                      60*6,
...                                      keywords=keywords,
...                                      approval_delay=60*60)

# this was a valid request
>>> hit_type_rs.status
True

# the HIT Type Id is a unicode string
>>> hit_type_id = hit_type_rs.HITTypeId
>>> hit_type_id # doctest: +ELLIPSIS
u'...'

# create content for a question
>>> qn_content = QuestionContent(title='Boto question content create_hit_from_hit_type',
...                              text='What is a boto create_hit_from_hit_type?')

# create the question specification
>>> qn = Question(identifier=str(uuid.uuid4()),
...               content=qn_content,
...               answer_spec=AnswerSpecification(FreeTextAnswer()))

# now, create the actual HIT for the question using the HIT type
# NOTE - the response_groups are specified to get back additional information for testing
>>> create_hit_rs = conn.create_hit(hit_type=hit_type_rs.HITTypeId,
...                                 question=qn,
...                                 lifetime=60*65,
...                                 max_assignments=2,
...                                 annotation='An annotation from boto create_hit_from_hit_type test',
...                                 response_groups=['Minimal',
...                                                  'HITDetail',
...                                                  'HITQuestion',
...                                                  'HITAssignmentSummary',])

# this is a valid request
>>> create_hit_rs.status
True

# for the requested hit type id
>>> create_hit_rs.HITTypeId == hit_type_id
True

# with the correct number of maximum assignments
>>> create_hit_rs.MaxAssignments
u'2'

# and the approval delay
>>> create_hit_rs.AutoApprovalDelayInSeconds
u'3600'

# expiration should be very close to now + the lifetime in seconds
>>> expected_datetime = datetime.datetime.utcnow() + datetime.timedelta(seconds=3900)
>>> expiration_datetime = datetime.datetime.strptime(create_hit_rs.Expiration, '%Y-%m-%dT%H:%M:%SZ')
>>> delta = expected_datetime - expiration_datetime
>>> delta.seconds < 5
True

# duration is as specified for the HIT type
>>> create_hit_rs.AssignmentDurationInSeconds
u'360'

# the reward has been set correctly
>>> create_hit_rs[0].amount
0.12

>>> create_hit_rs[0].formatted_price
u'$0.12'

# only US currency supported at present
>>> create_hit_rs[0].currency_code
u'USD'

# title is the HIT type title
>>> create_hit_rs.Title
u'Boto Test HIT type'

# title is the HIT type description
>>> create_hit_rs.Description
u'HIT Type for testing Boto'

# annotation is correct
>>> create_hit_rs.RequesterAnnotation
u'An annotation from boto create_hit_from_hit_type test'

# not reviewed yet
>>> create_hit_rs.HITReviewStatus
u'NotReviewed'
