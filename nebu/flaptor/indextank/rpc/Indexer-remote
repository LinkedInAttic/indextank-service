#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Indexer
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void addDoc(string docid, Document doc, i32 timestamp_boost,  boosts)'
  print '  void updateTimestampBoost(string docid, i32 timestamp_boost)'
  print '  void updateBoost(string docid,  boosts)'
  print '  void updateCategories(string docid,  categories)'
  print '  void delDoc(string docid)'
  print '  void promoteResult(string docid, string query)'
  print '  void dump()'
  print '  void addScoreFunction(i32 functionIndex, string definition)'
  print '  void removeScoreFunction(i32 functionIndex)'
  print '   listScoreFunctions()'
  print '  IndexerStats stats()'
  print '   get_stats()'
  print '  void force_gc()'
  print '  IndexerStatus getStatus()'
  print '  void ping()'
  print '  void startFullRecovery()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Indexer.Client(protocol)
transport.open()

if cmd == 'addDoc':
  if len(args) != 4:
    print 'addDoc requires 4 args'
    sys.exit(1)
  pp.pprint(client.addDoc(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'updateTimestampBoost':
  if len(args) != 2:
    print 'updateTimestampBoost requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateTimestampBoost(args[0],eval(args[1]),))

elif cmd == 'updateBoost':
  if len(args) != 2:
    print 'updateBoost requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateBoost(args[0],eval(args[1]),))

elif cmd == 'updateCategories':
  if len(args) != 2:
    print 'updateCategories requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateCategories(args[0],eval(args[1]),))

elif cmd == 'delDoc':
  if len(args) != 1:
    print 'delDoc requires 1 args'
    sys.exit(1)
  pp.pprint(client.delDoc(args[0],))

elif cmd == 'promoteResult':
  if len(args) != 2:
    print 'promoteResult requires 2 args'
    sys.exit(1)
  pp.pprint(client.promoteResult(args[0],args[1],))

elif cmd == 'dump':
  if len(args) != 0:
    print 'dump requires 0 args'
    sys.exit(1)
  pp.pprint(client.dump())

elif cmd == 'addScoreFunction':
  if len(args) != 2:
    print 'addScoreFunction requires 2 args'
    sys.exit(1)
  pp.pprint(client.addScoreFunction(eval(args[0]),args[1],))

elif cmd == 'removeScoreFunction':
  if len(args) != 1:
    print 'removeScoreFunction requires 1 args'
    sys.exit(1)
  pp.pprint(client.removeScoreFunction(eval(args[0]),))

elif cmd == 'listScoreFunctions':
  if len(args) != 0:
    print 'listScoreFunctions requires 0 args'
    sys.exit(1)
  pp.pprint(client.listScoreFunctions())

elif cmd == 'stats':
  if len(args) != 0:
    print 'stats requires 0 args'
    sys.exit(1)
  pp.pprint(client.stats())

elif cmd == 'get_stats':
  if len(args) != 0:
    print 'get_stats requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_stats())

elif cmd == 'force_gc':
  if len(args) != 0:
    print 'force_gc requires 0 args'
    sys.exit(1)
  pp.pprint(client.force_gc())

elif cmd == 'getStatus':
  if len(args) != 0:
    print 'getStatus requires 0 args'
    sys.exit(1)
  pp.pprint(client.getStatus())

elif cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'startFullRecovery':
  if len(args) != 0:
    print 'startFullRecovery requires 0 args'
    sys.exit(1)
  pp.pprint(client.startFullRecovery())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
