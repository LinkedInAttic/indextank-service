#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def enqueueAddStore(self, indexId, docId, document, timestamp_boost, boosts):
    """
    Parameters:
     - indexId
     - docId
     - document
     - timestamp_boost
     - boosts
    """
    pass

  def enqueueRemoveStore(self, indexId, docId):
    """
    Parameters:
     - indexId
     - docId
    """
    pass

  def enqueueUpdateBoosts(self, indexId, docId, boosts):
    """
    Parameters:
     - indexId
     - docId
     - boosts
    """
    pass

  def enqueueUpdateTimestamp(self, indexId, docId, timestamp_boost):
    """
    Parameters:
     - indexId
     - docId
     - timestamp_boost
    """
    pass

  def enqueueUpdateCategories(self, indexId, docId, categories):
    """
    Parameters:
     - indexId
     - docId
     - categories
    """
    pass

  def sendAdminCommand(self, command, info):
    """
    Parameters:
     - command
     - info
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def enqueueAddStore(self, indexId, docId, document, timestamp_boost, boosts):
    """
    Parameters:
     - indexId
     - docId
     - document
     - timestamp_boost
     - boosts
    """
    self.send_enqueueAddStore(indexId, docId, document, timestamp_boost, boosts)
    self.recv_enqueueAddStore()

  def send_enqueueAddStore(self, indexId, docId, document, timestamp_boost, boosts):
    self._oprot.writeMessageBegin('enqueueAddStore', TMessageType.CALL, self._seqid)
    args = enqueueAddStore_args()
    args.indexId = indexId
    args.docId = docId
    args.document = document
    args.timestamp_boost = timestamp_boost
    args.boosts = boosts
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enqueueAddStore(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enqueueAddStore_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ite != None:
      raise result.ite
    return

  def enqueueRemoveStore(self, indexId, docId):
    """
    Parameters:
     - indexId
     - docId
    """
    self.send_enqueueRemoveStore(indexId, docId)
    self.recv_enqueueRemoveStore()

  def send_enqueueRemoveStore(self, indexId, docId):
    self._oprot.writeMessageBegin('enqueueRemoveStore', TMessageType.CALL, self._seqid)
    args = enqueueRemoveStore_args()
    args.indexId = indexId
    args.docId = docId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enqueueRemoveStore(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enqueueRemoveStore_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ite != None:
      raise result.ite
    return

  def enqueueUpdateBoosts(self, indexId, docId, boosts):
    """
    Parameters:
     - indexId
     - docId
     - boosts
    """
    self.send_enqueueUpdateBoosts(indexId, docId, boosts)
    self.recv_enqueueUpdateBoosts()

  def send_enqueueUpdateBoosts(self, indexId, docId, boosts):
    self._oprot.writeMessageBegin('enqueueUpdateBoosts', TMessageType.CALL, self._seqid)
    args = enqueueUpdateBoosts_args()
    args.indexId = indexId
    args.docId = docId
    args.boosts = boosts
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enqueueUpdateBoosts(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enqueueUpdateBoosts_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ite != None:
      raise result.ite
    return

  def enqueueUpdateTimestamp(self, indexId, docId, timestamp_boost):
    """
    Parameters:
     - indexId
     - docId
     - timestamp_boost
    """
    self.send_enqueueUpdateTimestamp(indexId, docId, timestamp_boost)
    self.recv_enqueueUpdateTimestamp()

  def send_enqueueUpdateTimestamp(self, indexId, docId, timestamp_boost):
    self._oprot.writeMessageBegin('enqueueUpdateTimestamp', TMessageType.CALL, self._seqid)
    args = enqueueUpdateTimestamp_args()
    args.indexId = indexId
    args.docId = docId
    args.timestamp_boost = timestamp_boost
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enqueueUpdateTimestamp(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enqueueUpdateTimestamp_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ite != None:
      raise result.ite
    return

  def enqueueUpdateCategories(self, indexId, docId, categories):
    """
    Parameters:
     - indexId
     - docId
     - categories
    """
    self.send_enqueueUpdateCategories(indexId, docId, categories)
    self.recv_enqueueUpdateCategories()

  def send_enqueueUpdateCategories(self, indexId, docId, categories):
    self._oprot.writeMessageBegin('enqueueUpdateCategories', TMessageType.CALL, self._seqid)
    args = enqueueUpdateCategories_args()
    args.indexId = indexId
    args.docId = docId
    args.categories = categories
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enqueueUpdateCategories(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enqueueUpdateCategories_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ite != None:
      raise result.ite
    return

  def sendAdminCommand(self, command, info):
    """
    Parameters:
     - command
     - info
    """
    self.send_sendAdminCommand(command, info)
    return self.recv_sendAdminCommand()

  def send_sendAdminCommand(self, command, info):
    self._oprot.writeMessageBegin('sendAdminCommand', TMessageType.CALL, self._seqid)
    args = sendAdminCommand_args()
    args.command = command
    args.info = info
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendAdminCommand(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendAdminCommand_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ite != None:
      raise result.ite
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendAdminCommand failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["enqueueAddStore"] = Processor.process_enqueueAddStore
    self._processMap["enqueueRemoveStore"] = Processor.process_enqueueRemoveStore
    self._processMap["enqueueUpdateBoosts"] = Processor.process_enqueueUpdateBoosts
    self._processMap["enqueueUpdateTimestamp"] = Processor.process_enqueueUpdateTimestamp
    self._processMap["enqueueUpdateCategories"] = Processor.process_enqueueUpdateCategories
    self._processMap["sendAdminCommand"] = Processor.process_sendAdminCommand

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_enqueueAddStore(self, seqid, iprot, oprot):
    args = enqueueAddStore_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enqueueAddStore_result()
    try:
      self._handler.enqueueAddStore(args.indexId, args.docId, args.document, args.timestamp_boost, args.boosts)
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("enqueueAddStore", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enqueueRemoveStore(self, seqid, iprot, oprot):
    args = enqueueRemoveStore_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enqueueRemoveStore_result()
    try:
      self._handler.enqueueRemoveStore(args.indexId, args.docId)
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("enqueueRemoveStore", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enqueueUpdateBoosts(self, seqid, iprot, oprot):
    args = enqueueUpdateBoosts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enqueueUpdateBoosts_result()
    try:
      self._handler.enqueueUpdateBoosts(args.indexId, args.docId, args.boosts)
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("enqueueUpdateBoosts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enqueueUpdateTimestamp(self, seqid, iprot, oprot):
    args = enqueueUpdateTimestamp_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enqueueUpdateTimestamp_result()
    try:
      self._handler.enqueueUpdateTimestamp(args.indexId, args.docId, args.timestamp_boost)
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("enqueueUpdateTimestamp", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enqueueUpdateCategories(self, seqid, iprot, oprot):
    args = enqueueUpdateCategories_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enqueueUpdateCategories_result()
    try:
      self._handler.enqueueUpdateCategories(args.indexId, args.docId, args.categories)
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("enqueueUpdateCategories", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendAdminCommand(self, seqid, iprot, oprot):
    args = sendAdminCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendAdminCommand_result()
    try:
      result.success = self._handler.sendAdminCommand(args.command, args.info)
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("sendAdminCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class enqueueAddStore_args:
  """
  Attributes:
   - indexId
   - docId
   - document
   - timestamp_boost
   - boosts
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indexId', None, None, ), # 1
    (2, TType.STRING, 'docId', None, None, ), # 2
    (3, TType.STRUCT, 'document', (Document, Document.thrift_spec), None, ), # 3
    (4, TType.I32, 'timestamp_boost', None, None, ), # 4
    (5, TType.MAP, 'boosts', (TType.I32,None,TType.DOUBLE,None), None, ), # 5
  )

  def __init__(self, indexId=None, docId=None, document=None, timestamp_boost=None, boosts=None,):
    self.indexId = indexId
    self.docId = docId
    self.document = document
    self.timestamp_boost = timestamp_boost
    self.boosts = boosts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indexId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.docId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.document = Document()
          self.document.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp_boost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.boosts = {}
          (_ktype259, _vtype260, _size258 ) = iprot.readMapBegin() 
          for _i262 in xrange(_size258):
            _key263 = iprot.readI32();
            _val264 = iprot.readDouble();
            self.boosts[_key263] = _val264
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueAddStore_args')
    if self.indexId != None:
      oprot.writeFieldBegin('indexId', TType.STRING, 1)
      oprot.writeString(self.indexId)
      oprot.writeFieldEnd()
    if self.docId != None:
      oprot.writeFieldBegin('docId', TType.STRING, 2)
      oprot.writeString(self.docId)
      oprot.writeFieldEnd()
    if self.document != None:
      oprot.writeFieldBegin('document', TType.STRUCT, 3)
      self.document.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp_boost != None:
      oprot.writeFieldBegin('timestamp_boost', TType.I32, 4)
      oprot.writeI32(self.timestamp_boost)
      oprot.writeFieldEnd()
    if self.boosts != None:
      oprot.writeFieldBegin('boosts', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(self.boosts))
      for kiter265,viter266 in self.boosts.items():
        oprot.writeI32(kiter265)
        oprot.writeDouble(viter266)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueAddStore_result:
  """
  Attributes:
   - ite
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, ite=None,):
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueAddStore_result')
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueRemoveStore_args:
  """
  Attributes:
   - indexId
   - docId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indexId', None, None, ), # 1
    (2, TType.STRING, 'docId', None, None, ), # 2
  )

  def __init__(self, indexId=None, docId=None,):
    self.indexId = indexId
    self.docId = docId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indexId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.docId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueRemoveStore_args')
    if self.indexId != None:
      oprot.writeFieldBegin('indexId', TType.STRING, 1)
      oprot.writeString(self.indexId)
      oprot.writeFieldEnd()
    if self.docId != None:
      oprot.writeFieldBegin('docId', TType.STRING, 2)
      oprot.writeString(self.docId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueRemoveStore_result:
  """
  Attributes:
   - ite
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, ite=None,):
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueRemoveStore_result')
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueUpdateBoosts_args:
  """
  Attributes:
   - indexId
   - docId
   - boosts
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indexId', None, None, ), # 1
    (2, TType.STRING, 'docId', None, None, ), # 2
    (3, TType.MAP, 'boosts', (TType.I32,None,TType.DOUBLE,None), None, ), # 3
  )

  def __init__(self, indexId=None, docId=None, boosts=None,):
    self.indexId = indexId
    self.docId = docId
    self.boosts = boosts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indexId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.docId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.boosts = {}
          (_ktype268, _vtype269, _size267 ) = iprot.readMapBegin() 
          for _i271 in xrange(_size267):
            _key272 = iprot.readI32();
            _val273 = iprot.readDouble();
            self.boosts[_key272] = _val273
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueUpdateBoosts_args')
    if self.indexId != None:
      oprot.writeFieldBegin('indexId', TType.STRING, 1)
      oprot.writeString(self.indexId)
      oprot.writeFieldEnd()
    if self.docId != None:
      oprot.writeFieldBegin('docId', TType.STRING, 2)
      oprot.writeString(self.docId)
      oprot.writeFieldEnd()
    if self.boosts != None:
      oprot.writeFieldBegin('boosts', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(self.boosts))
      for kiter274,viter275 in self.boosts.items():
        oprot.writeI32(kiter274)
        oprot.writeDouble(viter275)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueUpdateBoosts_result:
  """
  Attributes:
   - ite
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, ite=None,):
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueUpdateBoosts_result')
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueUpdateTimestamp_args:
  """
  Attributes:
   - indexId
   - docId
   - timestamp_boost
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indexId', None, None, ), # 1
    (2, TType.STRING, 'docId', None, None, ), # 2
    (3, TType.I32, 'timestamp_boost', None, None, ), # 3
  )

  def __init__(self, indexId=None, docId=None, timestamp_boost=None,):
    self.indexId = indexId
    self.docId = docId
    self.timestamp_boost = timestamp_boost

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indexId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.docId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp_boost = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueUpdateTimestamp_args')
    if self.indexId != None:
      oprot.writeFieldBegin('indexId', TType.STRING, 1)
      oprot.writeString(self.indexId)
      oprot.writeFieldEnd()
    if self.docId != None:
      oprot.writeFieldBegin('docId', TType.STRING, 2)
      oprot.writeString(self.docId)
      oprot.writeFieldEnd()
    if self.timestamp_boost != None:
      oprot.writeFieldBegin('timestamp_boost', TType.I32, 3)
      oprot.writeI32(self.timestamp_boost)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueUpdateTimestamp_result:
  """
  Attributes:
   - ite
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, ite=None,):
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueUpdateTimestamp_result')
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueUpdateCategories_args:
  """
  Attributes:
   - indexId
   - docId
   - categories
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indexId', None, None, ), # 1
    (2, TType.STRING, 'docId', None, None, ), # 2
    (3, TType.MAP, 'categories', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, indexId=None, docId=None, categories=None,):
    self.indexId = indexId
    self.docId = docId
    self.categories = categories

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indexId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.docId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.categories = {}
          (_ktype277, _vtype278, _size276 ) = iprot.readMapBegin() 
          for _i280 in xrange(_size276):
            _key281 = iprot.readString();
            _val282 = iprot.readString();
            self.categories[_key281] = _val282
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueUpdateCategories_args')
    if self.indexId != None:
      oprot.writeFieldBegin('indexId', TType.STRING, 1)
      oprot.writeString(self.indexId)
      oprot.writeFieldEnd()
    if self.docId != None:
      oprot.writeFieldBegin('docId', TType.STRING, 2)
      oprot.writeString(self.docId)
      oprot.writeFieldEnd()
    if self.categories != None:
      oprot.writeFieldBegin('categories', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.categories))
      for kiter283,viter284 in self.categories.items():
        oprot.writeString(kiter283)
        oprot.writeString(viter284)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueueUpdateCategories_result:
  """
  Attributes:
   - ite
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, ite=None,):
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueueUpdateCategories_result')
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendAdminCommand_args:
  """
  Attributes:
   - command
   - info
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'command', None, None, ), # 1
    (2, TType.MAP, 'info', (TType.STRING,None,TType.STRING,None), {
    }, ), # 2
  )

  def __init__(self, command=None, info=thrift_spec[2][4],):
    self.command = command
    if info is self.thrift_spec[2][4]:
      info = {
    }
    self.info = info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.command = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.info = {}
          (_ktype286, _vtype287, _size285 ) = iprot.readMapBegin() 
          for _i289 in xrange(_size285):
            _key290 = iprot.readString();
            _val291 = iprot.readString();
            self.info[_key290] = _val291
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendAdminCommand_args')
    if self.command != None:
      oprot.writeFieldBegin('command', TType.STRING, 1)
      oprot.writeString(self.command)
      oprot.writeFieldEnd()
    if self.info != None:
      oprot.writeFieldBegin('info', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.info))
      for kiter292,viter293 in self.info.items():
        oprot.writeString(kiter292)
        oprot.writeString(viter293)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendAdminCommand_result:
  """
  Attributes:
   - success
   - ite
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ite=None,):
    self.success = success
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendAdminCommand_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
