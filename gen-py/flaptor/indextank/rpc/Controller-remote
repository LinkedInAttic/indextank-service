#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Controller
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool start_engine(string json_configuration)'
  print '  i32 kill_engine(string index_code, i32 base_port)'
  print '  WorkerMountStats get_worker_mount_stats()'
  print '  WorkerLoadStats get_worker_load_stats()'
  print '  IndexStats get_worker_index_stats(string index_code, i32 port)'
  print '  void stats()'
  print '  i32 update_worker(string source_host)'
  print '  void restart_controller()'
  print '  string head(string file, i32 lines, string index_code, i32 base_port)'
  print '  string tail(string file, i32 lines, string index_code, i32 base_port)'
  print '  string ps_info(string pidfile, string index_code, i32 base_port)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Controller.Client(protocol)
transport.open()

if cmd == 'start_engine':
  if len(args) != 1:
    print 'start_engine requires 1 args'
    sys.exit(1)
  pp.pprint(client.start_engine(args[0],))

elif cmd == 'kill_engine':
  if len(args) != 2:
    print 'kill_engine requires 2 args'
    sys.exit(1)
  pp.pprint(client.kill_engine(args[0],eval(args[1]),))

elif cmd == 'get_worker_mount_stats':
  if len(args) != 0:
    print 'get_worker_mount_stats requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_worker_mount_stats())

elif cmd == 'get_worker_load_stats':
  if len(args) != 0:
    print 'get_worker_load_stats requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_worker_load_stats())

elif cmd == 'get_worker_index_stats':
  if len(args) != 2:
    print 'get_worker_index_stats requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_worker_index_stats(args[0],eval(args[1]),))

elif cmd == 'stats':
  if len(args) != 0:
    print 'stats requires 0 args'
    sys.exit(1)
  pp.pprint(client.stats())

elif cmd == 'update_worker':
  if len(args) != 1:
    print 'update_worker requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_worker(args[0],))

elif cmd == 'restart_controller':
  if len(args) != 0:
    print 'restart_controller requires 0 args'
    sys.exit(1)
  pp.pprint(client.restart_controller())

elif cmd == 'head':
  if len(args) != 4:
    print 'head requires 4 args'
    sys.exit(1)
  pp.pprint(client.head(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'tail':
  if len(args) != 4:
    print 'tail requires 4 args'
    sys.exit(1)
  pp.pprint(client.tail(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'ps_info':
  if len(args) != 3:
    print 'ps_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.ps_info(args[0],args[1],eval(args[2]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
