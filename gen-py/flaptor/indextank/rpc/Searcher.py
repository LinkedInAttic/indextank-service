#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def search(self, query, start, length, scoringFunctionIndex, query_variables, facetsFilter, variableRangeFilters, functionRangeFilters, extra_parameters):
    """
    Parameters:
     - query
     - start
     - length
     - scoringFunctionIndex
     - query_variables
     - facetsFilter
     - variableRangeFilters
     - functionRangeFilters
     - extra_parameters
    """
    pass

  def count(self, query):
    """
    Parameters:
     - query
    """
    pass

  def size(self, ):
    pass

  def stats(self, ):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def search(self, query, start, length, scoringFunctionIndex, query_variables, facetsFilter, variableRangeFilters, functionRangeFilters, extra_parameters):
    """
    Parameters:
     - query
     - start
     - length
     - scoringFunctionIndex
     - query_variables
     - facetsFilter
     - variableRangeFilters
     - functionRangeFilters
     - extra_parameters
    """
    self.send_search(query, start, length, scoringFunctionIndex, query_variables, facetsFilter, variableRangeFilters, functionRangeFilters, extra_parameters)
    return self.recv_search()

  def send_search(self, query, start, length, scoringFunctionIndex, query_variables, facetsFilter, variableRangeFilters, functionRangeFilters, extra_parameters):
    self._oprot.writeMessageBegin('search', TMessageType.CALL, self._seqid)
    args = search_args()
    args.query = query
    args.start = start
    args.length = length
    args.scoringFunctionIndex = scoringFunctionIndex
    args.query_variables = query_variables
    args.facetsFilter = facetsFilter
    args.variableRangeFilters = variableRangeFilters
    args.functionRangeFilters = functionRangeFilters
    args.extra_parameters = extra_parameters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_search(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = search_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ite != None:
      raise result.ite
    if result.iqe != None:
      raise result.iqe
    if result.qve != None:
      raise result.qve
    raise TApplicationException(TApplicationException.MISSING_RESULT, "search failed: unknown result");

  def count(self, query):
    """
    Parameters:
     - query
    """
    self.send_count(query)
    return self.recv_count()

  def send_count(self, query):
    self._oprot.writeMessageBegin('count', TMessageType.CALL, self._seqid)
    args = count_args()
    args.query = query
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_count(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = count_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ite != None:
      raise result.ite
    raise TApplicationException(TApplicationException.MISSING_RESULT, "count failed: unknown result");

  def size(self, ):
    self.send_size()
    return self.recv_size()

  def send_size(self, ):
    self._oprot.writeMessageBegin('size', TMessageType.CALL, self._seqid)
    args = size_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_size(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = size_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ite != None:
      raise result.ite
    raise TApplicationException(TApplicationException.MISSING_RESULT, "size failed: unknown result");

  def stats(self, ):
    self.send_stats()
    return self.recv_stats()

  def send_stats(self, ):
    self._oprot.writeMessageBegin('stats', TMessageType.CALL, self._seqid)
    args = stats_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stats(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stats_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ite != None:
      raise result.ite
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stats failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["search"] = Processor.process_search
    self._processMap["count"] = Processor.process_count
    self._processMap["size"] = Processor.process_size
    self._processMap["stats"] = Processor.process_stats

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_search(self, seqid, iprot, oprot):
    args = search_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = search_result()
    try:
      result.success = self._handler.search(args.query, args.start, args.length, args.scoringFunctionIndex, args.query_variables, args.facetsFilter, args.variableRangeFilters, args.functionRangeFilters, args.extra_parameters)
    except IndextankException, ite:
      result.ite = ite
    except InvalidQueryException, iqe:
      result.iqe = iqe
    except MissingQueryVariableException, qve:
      result.qve = qve
    oprot.writeMessageBegin("search", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_count(self, seqid, iprot, oprot):
    args = count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = count_result()
    try:
      result.success = self._handler.count(args.query)
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_size(self, seqid, iprot, oprot):
    args = size_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = size_result()
    try:
      result.success = self._handler.size()
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("size", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stats(self, seqid, iprot, oprot):
    args = stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stats_result()
    try:
      result.success = self._handler.stats()
    except IndextankException, ite:
      result.ite = ite
    oprot.writeMessageBegin("stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class search_args:
  """
  Attributes:
   - query
   - start
   - length
   - scoringFunctionIndex
   - query_variables
   - facetsFilter
   - variableRangeFilters
   - functionRangeFilters
   - extra_parameters
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'query', None, None, ), # 1
    (2, TType.I32, 'start', None, None, ), # 2
    (3, TType.I32, 'length', None, None, ), # 3
    (4, TType.I32, 'scoringFunctionIndex', None, None, ), # 4
    (5, TType.MAP, 'extra_parameters', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'query_variables', (TType.I32,None,TType.DOUBLE,None), {
    }, ), # 6
    (7, TType.LIST, 'facetsFilter', (TType.STRUCT,(CategoryFilter, CategoryFilter.thrift_spec)), [
    ], ), # 7
    (8, TType.LIST, 'variableRangeFilters', (TType.STRUCT,(RangeFilter, RangeFilter.thrift_spec)), [
    ], ), # 8
    (9, TType.LIST, 'functionRangeFilters', (TType.STRUCT,(RangeFilter, RangeFilter.thrift_spec)), [
    ], ), # 9
  )

  def __init__(self, query=None, start=None, length=None, scoringFunctionIndex=None, query_variables=thrift_spec[6][4], facetsFilter=thrift_spec[7][4], variableRangeFilters=thrift_spec[8][4], functionRangeFilters=thrift_spec[9][4], extra_parameters=None,):
    self.query = query
    self.start = start
    self.length = length
    self.scoringFunctionIndex = scoringFunctionIndex
    if query_variables is self.thrift_spec[6][4]:
      query_variables = {
    }
    self.query_variables = query_variables
    if facetsFilter is self.thrift_spec[7][4]:
      facetsFilter = [
    ]
    self.facetsFilter = facetsFilter
    if variableRangeFilters is self.thrift_spec[8][4]:
      variableRangeFilters = [
    ]
    self.variableRangeFilters = variableRangeFilters
    if functionRangeFilters is self.thrift_spec[9][4]:
      functionRangeFilters = [
    ]
    self.functionRangeFilters = functionRangeFilters
    self.extra_parameters = extra_parameters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.query = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.start = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.length = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.scoringFunctionIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.query_variables = {}
          (_ktype168, _vtype169, _size167 ) = iprot.readMapBegin() 
          for _i171 in xrange(_size167):
            _key172 = iprot.readI32();
            _val173 = iprot.readDouble();
            self.query_variables[_key172] = _val173
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.facetsFilter = []
          (_etype177, _size174) = iprot.readListBegin()
          for _i178 in xrange(_size174):
            _elem179 = CategoryFilter()
            _elem179.read(iprot)
            self.facetsFilter.append(_elem179)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.variableRangeFilters = []
          (_etype183, _size180) = iprot.readListBegin()
          for _i184 in xrange(_size180):
            _elem185 = RangeFilter()
            _elem185.read(iprot)
            self.variableRangeFilters.append(_elem185)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.functionRangeFilters = []
          (_etype189, _size186) = iprot.readListBegin()
          for _i190 in xrange(_size186):
            _elem191 = RangeFilter()
            _elem191.read(iprot)
            self.functionRangeFilters.append(_elem191)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.extra_parameters = {}
          (_ktype193, _vtype194, _size192 ) = iprot.readMapBegin() 
          for _i196 in xrange(_size192):
            _key197 = iprot.readString();
            _val198 = iprot.readString();
            self.extra_parameters[_key197] = _val198
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_args')
    if self.query != None:
      oprot.writeFieldBegin('query', TType.STRING, 1)
      oprot.writeString(self.query)
      oprot.writeFieldEnd()
    if self.start != None:
      oprot.writeFieldBegin('start', TType.I32, 2)
      oprot.writeI32(self.start)
      oprot.writeFieldEnd()
    if self.length != None:
      oprot.writeFieldBegin('length', TType.I32, 3)
      oprot.writeI32(self.length)
      oprot.writeFieldEnd()
    if self.scoringFunctionIndex != None:
      oprot.writeFieldBegin('scoringFunctionIndex', TType.I32, 4)
      oprot.writeI32(self.scoringFunctionIndex)
      oprot.writeFieldEnd()
    if self.extra_parameters != None:
      oprot.writeFieldBegin('extra_parameters', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra_parameters))
      for kiter199,viter200 in self.extra_parameters.items():
        oprot.writeString(kiter199)
        oprot.writeString(viter200)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.query_variables != None:
      oprot.writeFieldBegin('query_variables', TType.MAP, 6)
      oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(self.query_variables))
      for kiter201,viter202 in self.query_variables.items():
        oprot.writeI32(kiter201)
        oprot.writeDouble(viter202)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.facetsFilter != None:
      oprot.writeFieldBegin('facetsFilter', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.facetsFilter))
      for iter203 in self.facetsFilter:
        iter203.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.variableRangeFilters != None:
      oprot.writeFieldBegin('variableRangeFilters', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.variableRangeFilters))
      for iter204 in self.variableRangeFilters:
        iter204.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.functionRangeFilters != None:
      oprot.writeFieldBegin('functionRangeFilters', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.functionRangeFilters))
      for iter205 in self.functionRangeFilters:
        iter205.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class search_result:
  """
  Attributes:
   - success
   - ite
   - iqe
   - qve
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ResultSet, ResultSet.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'iqe', (InvalidQueryException, InvalidQueryException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'qve', (MissingQueryVariableException, MissingQueryVariableException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ite=None, iqe=None, qve=None,):
    self.success = success
    self.ite = ite
    self.iqe = iqe
    self.qve = qve

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ResultSet()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.iqe = InvalidQueryException()
          self.iqe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.qve = MissingQueryVariableException()
          self.qve.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    if self.iqe != None:
      oprot.writeFieldBegin('iqe', TType.STRUCT, 2)
      self.iqe.write(oprot)
      oprot.writeFieldEnd()
    if self.qve != None:
      oprot.writeFieldBegin('qve', TType.STRUCT, 3)
      self.qve.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_args:
  """
  Attributes:
   - query
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'query', None, None, ), # 1
  )

  def __init__(self, query=None,):
    self.query = query

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.query = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_args')
    if self.query != None:
      oprot.writeFieldBegin('query', TType.STRING, 1)
      oprot.writeString(self.query)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_result:
  """
  Attributes:
   - success
   - ite
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ite=None,):
    self.success = success
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class size_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('size_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class size_result:
  """
  Attributes:
   - success
   - ite
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ite=None,):
    self.success = success
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('size_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stats_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stats_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stats_result:
  """
  Attributes:
   - success
   - ite
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SearcherStats, SearcherStats.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ite', (IndextankException, IndextankException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ite=None,):
    self.success = success
    self.ite = ite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SearcherStats()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ite = IndextankException()
          self.ite.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stats_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ite != None:
      oprot.writeFieldBegin('ite', TType.STRUCT, 1)
      self.ite.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
